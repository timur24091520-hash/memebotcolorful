import os
import logging
from PIL import Image, ImageDraw, ImageFont
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
CHANNEL_USERNAME = "@dragoncaneloni67"  # –±–µ–∑ @

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if not os.path.exists('temp'):
    os.makedirs('temp')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –¶–≤–µ—Ç–∞ —Ä–∞–º–æ–∫ –≤ RGB
FRAME_COLORS = {
    'purple': (128, 0, 128),
    'white': (255, 255, 255),
    'black': (0, 0, 0)
}

def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def create_image_with_frame(text, frame_color, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–∞–º–∫–æ–π"""
    try:
        # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = 800, 600
        frame_width = 40
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.new('RGB', (width, height), color=frame_color)
        draw = ImageDraw.Draw(image)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏)
        text_area = (frame_width, frame_width, width - frame_width, height - frame_width)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É)
        try:
            font = ImageFont.truetype("arial.ttf", 40)
        except:
            font = ImageFont.load_default()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        words = text.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            bbox = draw.textbbox((0, 0), test_line, font=font)
            text_width = bbox[2] - bbox[0]
            
            if text_width <= (width - 2 * frame_width - 20):
                current_line.append(word)
            else:
                lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        y_position = (height - len(lines) * 50) // 2
        
        for line in lines:
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x_position = (width - text_width) // 2
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            text_color = (255, 255, 255) if frame_color == FRAME_COLORS['black'] else (0, 0, 0)
            draw.text((x_position, y_position), line, font=font, fill=text_color)
            y_position += 50
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filename = f"temp/image_{user_id}.jpg"
        image.save(filename, "JPEG")
        return filename
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        markup = InlineKeyboardMarkup()
        subscribe_button = InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")
        check_button = InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        markup.add(subscribe_button)
        markup.add(check_button)
        
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=markup
        )
    else:
        send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup()
    create_button = InlineKeyboardButton("üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_image")
    markup.add(create_button)
    
    bot.send_message(
        chat_id,
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–∞–º–∫–æ–π",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = call.from_user.id
    
    if call.data == "check_subscription":
        if check_subscription(user_id):
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=None
            )
            send_main_menu(call.message.chat.id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    
    elif call.data == "create_image":
        if check_subscription(user_id):
            send_color_selection(call.message.chat.id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    
    elif call.data in FRAME_COLORS.keys():
        if check_subscription(user_id):
            msg = bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, process_text, call.data)
        else:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")

def send_color_selection(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏"""
    markup = InlineKeyboardMarkup()
    purple_button = InlineKeyboardButton("üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", callback_data="purple")
    white_button = InlineKeyboardButton("‚ö™ –ë–µ–ª—ã–π", callback_data="white")
    black_button = InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω—ã–π", callback_data="black")
    
    markup.add(purple_button)
    markup.add(white_button)
    markup.add(black_button)
    
    bot.send_message(
        chat_id,
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ä–∞–º–∫–∏:",
        reply_markup=markup
    )

def process_text(message, frame_color):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!")
        return
    
    if len(message.text) > 500:
        bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    processing_msg = bot.send_message(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    filename = create_image_with_frame(message.text, FRAME_COLORS[frame_color], user_id)
    
    if filename:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(filename, 'rb') as photo:
            color_name = {
                'purple': '—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π',
                'white': '–±–µ–ª–æ–π', 
                'black': '—á–µ—Ä–Ω–æ–π'
            }[frame_color]
            
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å {color_name} —Ä–∞–º–∫–æ–π!\n\n"
                       f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(filename)
        except:
            pass
    else:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    try:
        bot.delete_message(message.chat.id, processing_msg.message_id)
    except:
        pass

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        send_welcome(message)
    else:
        bot.send_message(
            message.chat.id,
            "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!"
        )

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
